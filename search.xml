<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>http系列协议简介(1)</title>
      <link href="/http%E7%B3%BB%E5%88%97%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B-1-55959dc08b8a/"/>
      <url>/http%E7%B3%BB%E5%88%97%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B-1-55959dc08b8a/</url>
      
        <content type="html"><![CDATA[<h3 id="http协议概述"><a href="#http协议概述" class="headerlink" title="http协议概述"></a>http协议概述</h3><p>http协议，超文本传输协议，属于应用层协议。工作在tcp&#x2F;ip协议之上。随时代发展，http协议也出现了1.0，1.1，2.0.3.0等版本迭代。网络安全方面也引入了ssl。在工作中，我们需要了解http协议的规范，工作流程，以及应用场景。</p><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p>在介绍协议时，考虑到由浅入深，所以这里先介绍http1.0，后续会介绍其他版本</p><h4 id="url格式"><a href="#url格式" class="headerlink" title="url格式"></a>url格式</h4><p>   http_URL &#x3D; “http:” “&#x2F;&#x2F;“ host [ “:” port ] [ abs_path [ “?” query ]]<br>   http的url格式如上，最开始为协议头，注意其中port不指定的情况下，http默认80，https默认443。host为主机名，尽可能使用网址而不是ip地址。<br>   <span id="more"></span></p><h5 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h5><p>uri：统一资源标识符<br>url：统一资源定位符（url是uri的子集，它不仅需要标识，还需要找到）</p><h5 id="http协议结构"><a href="#http协议结构" class="headerlink" title="http协议结构"></a>http协议结构</h5><p>http协议建立在客户端-服务器模式下，因此采用类似问答模式，客户端向服务端发起request，服务端应答response。在这种模式下，request和response包含两个部分：start-line，head和body（可选）。head中为http协议本身需要使用的数据，body则承载用户数据。<br>请求格式图：<br><img src="/http%E7%B3%BB%E5%88%97%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B-1-55959dc08b8a/image.png" alt="alt text"><br>可以看下下面这个例子,http协议非常好懂，第一行为startline，表示使用get方法，请求的url和http协议版本<br>从第二行开始，都是head部分，head部分结束后，有一个空行，之后就是body部分，本例子使用的时get请求，所以body为空，如果时post，则后面继续为kv结构。</p><pre><code class="hljs text">GET /mix/76.html?name=kelvin&amp;password=123456 HTTP/1.1Host: www.fishbay.cnUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Encoding: gzip, deflate, sdchAccept-Language: zh-CN,zh;q=0.8,en;q=0.6</code></pre><p>response结构与request类似，下面给出例子不再分析，大家也可以使用浏览器的f12功能查看。</p><pre><code class="hljs text">HTTP/1.1 200 OKServer: nginxDate: Mon, 20 Feb 2017 09:13:59 GMTContent-Type: text/plain;charset=UTF-8Vary: Accept-EncodingCache-Control: no-storePragrma: no-cacheExpires: Thu, 01 Jan 1970 00:00:00 GMTCache-Control: no-cacheContent-Encoding: gzipTransfer-Encoding: chunkedProxy-Connection: Keep-alive&#123;&quot;code&quot;:200,&quot;notice&quot;:0,&quot;follow&quot;:0,&quot;forward&quot;:0,&quot;msg&quot;:0,&quot;comment&quot;:0,&quot;pushMsg&quot;:null,&quot;friend&quot;:&#123;&quot;snsCount&quot;:0,&quot;count&quot;:0,&quot;celebrityCount&quot;:0&#125;,&quot;lastPrivateMsg&quot;:null,&quot;event&quot;:0,&quot;newProgramCount&quot;:0,&quot;createDJRadioCount&quot;:0,&quot;newTheme&quot;:true&#125;</code></pre><h4 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h4><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>1xx</td><td>内部中间状态，比如100-continue，实际使用比较少</td></tr><tr><td>2xx</td><td>通常表示成功，200，204，206</td></tr><tr><td>3xx</td><td>表示重定向</td></tr><tr><td>4xx</td><td>一般表示客户端错误403-禁止访问，404-资源不存在，400-访问被拒绝</td></tr><tr><td>5xx</td><td>通常时服务器问题，502-网关错误，503服务端无响应</td></tr></tbody></table><h4 id="http方法"><a href="#http方法" class="headerlink" title="http方法"></a>http方法</h4><table><thead><tr><th>方法</th><th>介绍</th></tr></thead><tbody><tr><td>get</td><td>获取指定资源</td></tr><tr><td>post</td><td>提交表单</td></tr></tbody></table><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>tcp连接-&gt;发送报文</p><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><p>https其实时http+ssl（tls），在tcp&#x2F;ip和http之间加入了一层tls握手，从而保证安全性。这里使用到了CA证书和非对称加密，解出确认身份并获取密钥之后，使用对称加密。这里主要是考虑到非对称加密的成本较高，所以只有tls握手阶段使用，传输数据时依然使用了堆成加密。</p>]]></content>
      
      
      <categories>
          
          <category> 网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gilde源码分析(2)-缓存设计</title>
      <link href="/gilde%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2-%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1-13be795a3eb0/"/>
      <url>/gilde%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2-%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1-13be795a3eb0/</url>
      
        <content type="html"><![CDATA[<h3 id="glide缓存设计"><a href="#glide缓存设计" class="headerlink" title="glide缓存设计"></a>glide缓存设计</h3><p>glide有内存缓存和磁盘缓存两种</p><h3 id="内存缓存"><a href="#内存缓存" class="headerlink" title="内存缓存"></a>内存缓存</h3><h4 id="active"><a href="#active" class="headerlink" title="active"></a>active</h4><p>active表示<strong>正在被其他view使用的资源</strong>，通过ActiveResources进行管理。该对象随engine初始化。<br>activeResources通过一个map存储。从内存加载或者加载完毕时会放入，engine执行relesase时会释放。使用弱引用。</p><h4 id="memory-cache"><a href="#memory-cache" class="headerlink" title="memory cache"></a>memory cache</h4><p><strong>策略</strong>：LRU<br><strong>来源</strong>：active resources</p><p>问：为什么有活动缓存？<br>答：确保正在使用的图片长时间未加载不被移除缓存</p><h3 id="磁盘缓存"><a href="#磁盘缓存" class="headerlink" title="磁盘缓存"></a>磁盘缓存</h3><p>两种，一种时资源缓存，一种是数据缓存</p><p>分别对应ResourceCacheGenerator和DataCacheGenerator</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Android三方库源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> glide </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gilde源码分析(1)-整体流程</title>
      <link href="/gilde%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B-25cc33410bf3/"/>
      <url>/gilde%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B-25cc33410bf3/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本篇是该博客的一篇技术文章，也是安卓三方库源码分析的第一篇文章。我们首先来分析的库是图片库–glide.哪怕是安卓开发的入门者都熟悉glide的使用方法。</p><pre><code class="hljs java">Glide.with(context).load(url).into(imageView)</code></pre><p>这里我们就可以看出这个库的设计之精巧，很明显这个库使用了builder的设计模式，使用起来十分简单方便。我们就从这个从网络url获取图片的例子开始，挨个分析这里的三个方法。分析完毕之后就会发现在这个简单的api背后，隐藏了负责的流程。</p><h3 id="从with开始"><a href="#从with开始" class="headerlink" title="从with开始"></a>从with开始</h3><pre><code class="hljs java"><span class="hljs-comment">//with方法其实是最外的一个封装，内部执行了两个方法，getRetriever和get</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RequestManager <span class="hljs-title function_">with</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Context context)</span> &#123;  <span class="hljs-keyword">return</span> getRetriever(context).get(context);&#125;<span class="hljs-comment">//这里还有很多层嵌套，就不一一展开，感兴趣可以看源码</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RequestManagerRetriever <span class="hljs-title function_">getRetriever</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Context context)</span> &#123;  <span class="hljs-comment">// Context could be null for other reasons (ie the user passes in null), but in practice it will</span>  <span class="hljs-comment">// only occur due to errors with the Fragment lifecycle.</span>  Preconditions.checkNotNull(context, DESTROYED_ACTIVITY_WARNING);  <span class="hljs-keyword">return</span> Glide.get(context).getRequestManagerRetriever();&#125;</code></pre><span id="more"></span><p>Glide.get() 作用是获取一个glide实例，是同步调用；如果这个实例未初始化，会最终调用到Glide的build方法，触发初始化任务。</p><pre><code class="hljs java"><span class="hljs-meta">@NonNull</span>Glide <span class="hljs-title function_">build</span><span class="hljs-params">(</span><span class="hljs-params">    <span class="hljs-meta">@NonNull</span> Context context,</span><span class="hljs-params">    List&lt;GlideModule&gt; manifestModules,</span><span class="hljs-params">    AppGlideModule annotationGeneratedGlideModule)</span> &#123;  <span class="hljs-keyword">if</span> (sourceExecutor == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//资源执行器，线程池</span>    sourceExecutor = GlideExecutor.newSourceExecutor();  &#125;  <span class="hljs-keyword">if</span> (diskCacheExecutor == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//缓存执行器，线程池</span>    diskCacheExecutor = GlideExecutor.newDiskCacheExecutor();  &#125;  <span class="hljs-keyword">if</span> (animationExecutor == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//动画执行器，线程池</span>    animationExecutor = GlideExecutor.newAnimationExecutor();  &#125;  <span class="hljs-keyword">if</span> (memorySizeCalculator == <span class="hljs-literal">null</span>) &#123;    memorySizeCalculator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemorySizeCalculator</span>.Builder(context).build();  &#125;  <span class="hljs-keyword">if</span> (connectivityMonitorFactory == <span class="hljs-literal">null</span>) &#123;    connectivityMonitorFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConnectivityMonitorFactory</span>();  &#125;  <span class="hljs-keyword">if</span> (bitmapPool == <span class="hljs-literal">null</span>) &#123;    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> memorySizeCalculator.getBitmapPoolSize();    <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">0</span>) &#123;      bitmapPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LruBitmapPool</span>(size);    &#125; <span class="hljs-keyword">else</span> &#123;      bitmapPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BitmapPoolAdapter</span>();    &#125;  &#125;  <span class="hljs-keyword">if</span> (arrayPool == <span class="hljs-literal">null</span>) &#123;    arrayPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LruArrayPool</span>(memorySizeCalculator.getArrayPoolSizeInBytes());  &#125;  <span class="hljs-comment">//初始化内存缓存</span>  <span class="hljs-keyword">if</span> (memoryCache == <span class="hljs-literal">null</span>) &#123;    memoryCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LruResourceCache</span>(memorySizeCalculator.getMemoryCacheSize());  &#125;  <span class="hljs-comment">//初始化磁盘缓存</span>  <span class="hljs-keyword">if</span> (diskCacheFactory == <span class="hljs-literal">null</span>) &#123;    diskCacheFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalCacheDiskCacheFactory</span>(context);  &#125;  <span class="hljs-comment">//这个engine也很重要</span>  <span class="hljs-keyword">if</span> (engine == <span class="hljs-literal">null</span>) &#123;    engine =        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Engine</span>(            memoryCache,            diskCacheFactory,            diskCacheExecutor,            sourceExecutor,            GlideExecutor.newUnlimitedSourceExecutor(),            animationExecutor,            isActiveResourceRetentionAllowed);  &#125;  <span class="hljs-keyword">if</span> (defaultRequestListeners == <span class="hljs-literal">null</span>) &#123;    defaultRequestListeners = Collections.emptyList();  &#125; <span class="hljs-keyword">else</span> &#123;    defaultRequestListeners = Collections.unmodifiableList(defaultRequestListeners);  &#125;  <span class="hljs-type">GlideExperiments</span> <span class="hljs-variable">experiments</span> <span class="hljs-operator">=</span> glideExperimentsBuilder.build();  <span class="hljs-type">RequestManagerRetriever</span> <span class="hljs-variable">requestManagerRetriever</span> <span class="hljs-operator">=</span>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestManagerRetriever</span>(requestManagerFactory);  <span class="hljs-comment">//最终返回实例</span>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Glide</span>(      context,      engine,      memoryCache,      bitmapPool,      arrayPool,      requestManagerRetriever,      connectivityMonitorFactory,      logLevel,      defaultRequestOptionsFactory,      defaultTransitionOptions,      defaultRequestListeners,      manifestModules,      annotationGeneratedGlideModule,      experiments);&#125;</code></pre><p>  RequestManagerRetriever中这里get方法的重载方法很多，但最终都是尝试获取到application的context，并利用他从而创建一个生命周期和application相同的requestManager并返回。</p><pre><code class="hljs java">  <span class="hljs-meta">@NonNull</span><span class="hljs-keyword">public</span> RequestManager <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Context context)</span> &#123;  <span class="hljs-keyword">if</span> (context == <span class="hljs-literal">null</span>) &#123;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;You cannot start a load on a null Context&quot;</span>);  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Util.isOnMainThread() &amp;&amp; !(context <span class="hljs-keyword">instanceof</span> Application)) &#123;    <span class="hljs-keyword">if</span> (context <span class="hljs-keyword">instanceof</span> FragmentActivity) &#123;      <span class="hljs-keyword">return</span> get((FragmentActivity) context);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (context <span class="hljs-keyword">instanceof</span> ContextWrapper        <span class="hljs-comment">// Only unwrap a ContextWrapper if the baseContext has a non-null application context.</span>        <span class="hljs-comment">// Context#createPackageContext may return a Context without an Application instance,</span>        <span class="hljs-comment">// in which case a ContextWrapper may be used to attach one.</span>        &amp;&amp; ((ContextWrapper) context).getBaseContext().getApplicationContext() != <span class="hljs-literal">null</span>) &#123;      <span class="hljs-keyword">return</span> get(((ContextWrapper) context).getBaseContext());    &#125;  &#125;  <span class="hljs-keyword">return</span> getApplicationManager(context);&#125;</code></pre><h3 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h3><p>这里只是简单的介绍一下load方法的过程，其中针对不同类型的资源都有不同的重载，具体可以看源码很复杂。简单插一句，在大多数三方库里，都依靠多态，接口来实现功能，java基础不好的同学可以先做了解，对提高代码设计能力很有帮助。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="hljs-title function_">load</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> String string)</span> &#123; <span class="hljs-comment">//先不分析具体实践，这里就是通过asDrawable方法获取到了requestBuilder</span>  <span class="hljs-keyword">return</span> asDrawable().load(string);&#125;  <span class="hljs-keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="hljs-title function_">asDrawable</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">//这里通过传入class进行区分</span>  <span class="hljs-keyword">return</span> as(Drawable.class);&#125;  <span class="hljs-keyword">public</span> &lt;ResourceType&gt; RequestBuilder&lt;ResourceType&gt; <span class="hljs-title function_">as</span><span class="hljs-params">(</span><span class="hljs-params">    <span class="hljs-meta">@NonNull</span> Class&lt;ResourceType&gt; resourceClass)</span> &#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestBuilder</span>&lt;&gt;(glide, <span class="hljs-built_in">this</span>, resourceClass, context);&#125;<span class="hljs-comment">//RequestBuilder#load</span>  <span class="hljs-keyword">public</span> RequestBuilder&lt;TranscodeType&gt; <span class="hljs-title function_">load</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bitmap bitmap)</span> &#123;  <span class="hljs-keyword">return</span> loadGeneric(bitmap).apply(diskCacheStrategyOf(DiskCacheStrategy.NONE));&#125;</code></pre><h3 id="into方法"><a href="#into方法" class="headerlink" title="into方法"></a>into方法</h3><p>整个流程中最复杂的一个方法，这里实现了图片资源的获取，解码，裁切等步骤，并通过handler机制将事件通知的主线程。</p><pre><code class="hljs java"><span class="hljs-keyword">private</span> &lt;Y <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Target</span>&lt;TranscodeType&gt;&gt; Y <span class="hljs-title function_">into</span><span class="hljs-params">(</span><span class="hljs-params">    <span class="hljs-meta">@NonNull</span> Y target,</span><span class="hljs-params">    <span class="hljs-meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span><span class="hljs-params">    BaseRequestOptions&lt;?&gt; options,</span><span class="hljs-params">    Executor callbackExecutor)</span> &#123;  Preconditions.checkNotNull(target);  <span class="hljs-keyword">if</span> (!isModelSet) &#123;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;You must call #load() before calling #into()&quot;</span>);  &#125;  <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> buildRequest(target, targetListener, options, callbackExecutor);  <span class="hljs-type">Request</span> <span class="hljs-variable">previous</span> <span class="hljs-operator">=</span> target.getRequest();  <span class="hljs-keyword">if</span> (request.isEquivalentTo(previous)      &amp;&amp; !isSkipMemoryCacheWithCompletePreviousRequest(options, previous)) &#123;    <span class="hljs-comment">// If the request is completed, beginning again will ensure the result is re-delivered,</span>    <span class="hljs-comment">// triggering RequestListeners and Targets. If the request is failed, beginning again will</span>    <span class="hljs-comment">// restart the request, giving it another chance to complete. If the request is already</span>    <span class="hljs-comment">// running, we can let it continue running without interruption.</span>    <span class="hljs-keyword">if</span> (!Preconditions.checkNotNull(previous).isRunning()) &#123;      <span class="hljs-comment">// Use the previous request rather than the new one to allow for optimizations like skipping</span>      <span class="hljs-comment">// setting placeholders, tracking and un-tracking Targets, and obtaining View dimensions</span>      <span class="hljs-comment">// that are done in the individual Request.</span>      previous.begin();    &#125;    <span class="hljs-keyword">return</span> target;  &#125;  requestManager.clear(target);  target.setRequest(request);  requestManager.track(target, request);  <span class="hljs-keyword">return</span> target;&#125;</code></pre><p>在into中通过一系列调用，使用engine触发异步加载</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;R&gt; LoadStatus <span class="hljs-title function_">load</span><span class="hljs-params">(</span><span class="hljs-params">     GlideContext glideContext,</span><span class="hljs-params">     Object model,</span><span class="hljs-params">     Key signature,</span><span class="hljs-params">     <span class="hljs-type">int</span> width,</span><span class="hljs-params">     <span class="hljs-type">int</span> height,</span><span class="hljs-params">     Class&lt;?&gt; resourceClass,</span><span class="hljs-params">     Class&lt;R&gt; transcodeClass,</span><span class="hljs-params">     Priority priority,</span><span class="hljs-params">     DiskCacheStrategy diskCacheStrategy,</span><span class="hljs-params">     Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,</span><span class="hljs-params">     <span class="hljs-type">boolean</span> isTransformationRequired,</span><span class="hljs-params">     <span class="hljs-type">boolean</span> isScaleOnlyOrNoTransform,</span><span class="hljs-params">     Options options,</span><span class="hljs-params">     <span class="hljs-type">boolean</span> isMemoryCacheable,</span><span class="hljs-params">     <span class="hljs-type">boolean</span> useUnlimitedSourceExecutorPool,</span><span class="hljs-params">     <span class="hljs-type">boolean</span> useAnimationPool,</span><span class="hljs-params">     <span class="hljs-type">boolean</span> onlyRetrieveFromCache,</span><span class="hljs-params">     ResourceCallback cb,</span><span class="hljs-params">     Executor callbackExecutor)</span> &#123;   <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : <span class="hljs-number">0</span>;   <span class="hljs-comment">//创建任务的key，这个key用于缓存和资源匹配，很重要；很多图片库定制可以从这里入手</span>   <span class="hljs-type">EngineKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span>       keyFactory.buildKey(           model,           signature,           width,           height,           transformations,           resourceClass,           transcodeClass,           options);   EngineResource&lt;?&gt; memoryResource;   <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;   <span class="hljs-comment">//通过缓存找到资源</span>     memoryResource = loadFromMemory(key, isMemoryCacheable, startTime);     <span class="hljs-keyword">if</span> (memoryResource == <span class="hljs-literal">null</span>) &#123;       <span class="hljs-keyword">return</span> waitForExistingOrStartNewJob(           glideContext,           model,           signature,           width,           height,           resourceClass,           transcodeClass,           priority,           diskCacheStrategy,           transformations,           isTransformationRequired,           isScaleOnlyOrNoTransform,           options,           isMemoryCacheable,           useUnlimitedSourceExecutorPool,           useAnimationPool,           onlyRetrieveFromCache,           cb,           callbackExecutor,           key,           startTime);     &#125;   &#125;</code></pre><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>glide代码走读预计会分为好几个文章，初步的规划为：</p><ul><li>整体流程</li><li>缓存机制</li><li>初始化设置</li><li>部分解码器分析</li><li>线程模型</li><li>版本变迁</li></ul><p>现在很多博客对于glide的讲解都停留在4.8.0，之后的版本有一些调整很多都没有提及，因为大多数互联网公司都没有使用新的技术。但是这这样对于新接触安卓的同学不是很友好，让他们觉得安卓开发停滞不前。同时这个系列更像是笔记，记录我在阅读代码过程中的一些关键点，很多地方没有写的很细。因我时间和经历有限，做不到教材的详细解答，所以大家如果有问题可以留言讨论，或者自行阅读源码。<br>ps：留言并未开通，我还在学习怎么设置留言~安啦。</p>]]></content>
      
      
      <categories>
          
          <category> Android三方库源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> glide </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
